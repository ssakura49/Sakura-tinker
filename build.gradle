buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '6.0.21+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}


plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
}

//apply plugin: 'org.spongepowered.mixin'

version = "1.2.9"
group = 'com.ssakura49.sakuratinker'

jarJar.enable()
base {
    archivesName = 'sakuratinker'
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://parchmentmc.org/docs/getting-started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'parchment', version: '2023.09.03-1.20.1'

    // When true, this property will have all Eclipse/IntelliJ IDEA run configurations run the "prepareX" task for the given run configuration before launching the game.
    // In most cases, it is not necessary to enable.
    // enableEclipsePrepareRuns = true
    // enableIdeaPrepareRuns = true

    // This property allows configuring Gradle's ProcessResources task(s) to run on IDE output locations before launching the game.
    // It is REQUIRED to be set to true for this template to function.
    // See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
    copyIdeResources = true

    // When true, this property will add the folder name of all declared run configurations to generated IDE run configurations.
    // The folder name can be set on a run configuration using the "folderName" property.
    // By default, the folder name of a run configuration is the name of the Gradle project containing it.
    // generateRunFolders = true

    // This property enables access transformers for use in development.
    // They will be applied to the Minecraft artifact.
    // The access transformer file can be anywhere in the project.
    // However, it must be at "META-INF/accesstransformer.cfg" in the final mod jar to be loaded by Forge.
    // This default location is a best practice to automatically put the file in the right place in the final jar.
    // See https://docs.minecraftforge.net/en/latest/advanced/accesstransformers/ for more information.
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        // applies to all the run configs below
        configureEach {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }

            args '--mixin', 'true'
        }

        client {
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            // example of overriding the workingDirectory set in configureEach above
            workingDirectory project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/'), '--existing-mod', 'tconstruct'
        }
    }
}

mixin {
    add sourceSets.main, "sakuratinker.refmap.json"
    config 'sakuratinker.mixins.json'
    config 'sakuratinker.extrabotany.mixins.json'
    debug.verbose = true
    debug.export = true
}
// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenLocal()
    flatDir {
        dirs 'libs'
    }
    maven { // SlimeKnights and JEI
        name 'DVS1 Maven FS'
        url 'https://dvs1.progwml6.com/files/maven'
    }
    maven { // Registrate
        url "https://maven.tterrag.com/"
    }
    maven {
        name 'cursemaven'
        url "https://cfa2.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
//    maven {
//        name = "Modrinth"
//        url = "https://api.modrinth.com/maven"
//    }
}

dependencies {
    // Specify the version of Minecraft to use.
    // Any artifact can be supplied so long as it has a "userdev" classifier artifact and is a compatible patcher artifact.
    // The "userdev" classifier will be requested and setup by ForgeGradle.
    // If the group id is "net.minecraft" and the artifact id is one of ["client", "server", "joined"],
    // then special handling is done to allow a setup of a vanilla dependency without the use of an external repository.
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    implementation fg.deobf("slimeknights.mantle:Mantle:1.20.1-1.11.56")
    implementation fg.deobf("slimeknights.tconstruct:TConstruct:1.20.1-3.10.0.69")

    implementation fg.deobf("curse.maven:jei-238222:6075247")
    implementation fg.deobf("curse.maven:etst-lib-1206379:6604304")
    implementation fg.deobf("curse.maven:tconjei-974154:6260922")

//    implementation fg.deobf("curse.maven:curios-309927:6238756")
    implementation fg.deobf("curse.maven:curios-309927:6418456")
    implementation fg.deobf("curse.maven:enigmatic-legacy-336184:5600004")
    implementation fg.deobf("curse.maven:patchouli-306770:6164575")
    implementation fg.deobf("curse.maven:caelus-308989:5281700")

//    implementation fg.deobf("curse.maven:farmers-delight-398521:6154802")
//    implementation fg.deobf("curse.maven:youkais-homecoming-957437:6269848")
    implementation fg.deobf("curse.maven:farmers-delight-398521:6597298")
    implementation fg.deobf("curse.maven:youkais-homecoming-957437:6631906")

    implementation fg.deobf("curse.maven:irons-spells-n-spellbooks-855414:6054196")
    implementation fg.deobf("curse.maven:playeranimator-658587:4587214")
    implementation fg.deobf("curse.maven:geckolib-388172:6027567")

    implementation fg.deobf("curse.maven:re-avaritia-623969:6130139")

    implementation fg.deobf("curse.maven:brandons-core-231382:5422013")
    implementation fg.deobf("curse.maven:codechicken-lib-1-8-242818:5753868")
    implementation fg.deobf("curse.maven:draconic-evolution-223565:6065044")

    implementation fg.deobf("curse.maven:mekanism-268560:6258796")

    implementation fg.deobf("curse.maven:ice-and-fire-dragons-264231:5633453")
    implementation fg.deobf("curse.maven:citadel-331936:6002521")
    implementation fg.deobf("curse.maven:dreadsteel-630764:5700620")
    implementation fg.deobf("curse.maven:shadowizardlib-887125:6198280")
//    implementation fg.deobf("curse.maven:tinkers-thinking-850772:6183807")
    implementation fg.deobf("curse.maven:embers-rekindled-300777:6386899")

    implementation fg.deobf("curse.maven:goety-586095:6518333")

    implementation fg.deobf("curse.maven:botania-225643:6366547")

    implementation fg.deobf("curse.maven:the-twilight-forest-227639:5468648")

    compileOnly fg.deobf(jarJar("com.tterrag.registrate:Registrate:MC1.20-1.3.11")) {
        transitive = false
        jarJar.ranged(it, "[MC1.20-1.3.3,)")
    }
    implementation fg.deobf(jarJar("dev.xkmc.l2library:l2library:2.4.25-slim")) {
        transitive = false
        jarJar.ranged(it, "[2.4.25,)")
    }
    implementation fg.deobf(jarJar("dev.xkmc.l2serial:l2serial:1.2.4")) {
        transitive = false
        jarJar.ranged(it, "[1.2.4,)")
    }
    implementation fg.deobf(jarJar("com.ssakura49.sakurashader:sakurashader:1.0")) {
        transitive = false
        jarJar.ranged(it, "[1.0,)")
    }
    implementation fg.deobf(jarJar("dev.xkmc.l2damagetracker:l2damagetracker:0.3.7")) {
        transitive = false
        jarJar.ranged(it, "[0.3.7,)")
    }

    implementation fg.deobf("curse.maven:event-wrapper-1256971:6622488")
    implementation fg.deobf("curse.maven:extrabotany-reburn-1271869:6628348")

    implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:0.2.0"))
    implementation(jarJar("io.github.llamalad7:mixinextras-forge:0.2.0")) {
        jarJar.ranged(it, "[0.2.0,)")
    }

    runtimeOnly fg.deobf("curse.maven:jade-324717:6106101")
    runtimeOnly fg.deobf("curse.maven:world-stripper-250603:4578579")
    runtimeOnly fg.deobf("curse.maven:selene-499980:5666912")
    runtimeOnly fg.deobf("curse.maven:mmmmmmmmmmmm-225738:6237015")
    runtimeOnly fg.deobf("curse.maven:classic-bars-317642:5983897")
    runtimeOnly fg.deobf("curse.maven:crafttweaker-239197:6256146")
    runtimeOnly fg.deobf("curse.maven:nbtedit-reborn-678133:5984630")
    // Example mod dependency with JEI - using fg.deobf() ensures the dependency is remapped to your development mappings
    // The JEI API is declared for compile time use, while the full JEI artifact is used at runtime
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}")
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}")
    // runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}")

    // Example mod dependency using a mod jar from ./libs with a flat dir repository
    // This maps to ./libs/coolmod-${mc_version}-${coolmod_version}.jar
    // The group id is ignored when searching -- in this case, it is "blank"
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")

    // For more info:
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}


// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

// Example for how to get properties into the manifest for reading at runtime.
tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "sakuratinker.mixins.json",
                'FMLAT': 'accesstransformer.cfg'
        ])
    }

    // This is the preferred method to reobfuscate your jar file
    finalizedBy 'reobfJar'
}

// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing:
tasks.named('publish').configure {
     dependsOn 'reobfJar'
 }

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.jarJar.configure {
    archiveClassifier.set('')
}

jar {
    archiveClassifier.set('slim')
}

tasks.named('processResources', ProcessResources).configure {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

